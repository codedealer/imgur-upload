name: Deploy Imgur Proxy to Vercel

on:
  workflow_dispatch:
    inputs:
      proxy_secret:
        description: 'Proxy Secret (leave empty to auto-generate)'
        required: false
        type: string
  push:
    branches: [ main, feat/gc-proxy ]
    paths: [ 'proxy/**' ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 9.15.2

    - name: Install dependencies
      run: |
        cd proxy
        pnpm install

    - name: Generate proxy secret if not provided
      id: proxy-secret
      run: |
        if [ -z "${{ github.event.inputs.proxy_secret }}" ]; then
          SECRET=$(openssl rand -hex 32)
          echo "SECRET=$SECRET" >> $GITHUB_OUTPUT
          echo "Using auto-generated proxy secret"
        else
          echo "SECRET=${{ github.event.inputs.proxy_secret }}" >> $GITHUB_OUTPUT
          echo "Using provided proxy secret"
        fi

    - name: Install Vercel CLI
      run: npm install -g vercel@latest

    - name: Deploy to Vercel
      run: |
        cd proxy
        vercel --token=${{ secrets.VERCEL_TOKEN }} --prod --yes
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    - name: Set environment variables
      run: |
        cd proxy
        vercel env add PROXY_SECRET production "${{ steps.proxy-secret.outputs.SECRET }}" --token=${{ secrets.VERCEL_TOKEN }} --yes || echo "Environment variable may already exist"

    - name: Get deployment URL
      id: get-url
      run: |
        cd proxy
        URL=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} | grep imgur-proxy | head -1 | awk '{print $2}')
        if [ -z "$URL" ]; then
          URL="https://imgur-proxy.vercel.app"
        fi
        echo "SERVICE_URL=https://$URL" >> $GITHUB_OUTPUT

    - name: Display deployment info
      run: |
        echo "üéâ Deployment successful!"
        echo ""
        echo "Service URL: ${{ steps.get-url.outputs.SERVICE_URL }}"
        echo "Health check: ${{ steps.get-url.outputs.SERVICE_URL }}/health"
        echo ""
        echo "To use the proxy, set these environment variables:"
        echo "GC_PROXY=${{ steps.get-url.outputs.SERVICE_URL }}"
        echo "PROXY_SECRET=${{ steps.proxy-secret.outputs.SECRET }}"
        echo ""
        echo "‚ö†Ô∏è  IMPORTANT: Save the PROXY_SECRET above - it won't be shown again!"